//All VM commands I need to write assembly code for:
push 
pop

add
sub
neg
eq
gt
lt
and
or
not



sp
local
arg
this
that
static
temp
constant
pointer


goto label
if-goto label
label

call functionName
function functionName
return

/////////////////////////////////////////////////////////////////

Here are the assembly versions of the aforementioned commands:


------push constant i
@i
D=A
@SP
A=M
M=D
@SP
M=M+1

------push local i
@i
D=A
@LCL
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1

------pop local i
@i
D=A
@LCL
D=D+M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

------push argument i
@i
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1

------pop argument i
@i
D=A
@ARG
D=D+M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

------push this i
@i
D=A
@THIS
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1

------pop this i
@i
D=A
@THIS
D=D+M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

------push that i
@i
D=A
@THAT
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1

------pop that i
@i
D=A
@THAT
D=D+M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

------push temp i
@i
D=A
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1

------pop temp i
@i
D=A
@5
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

------push pointer 0/1
@THIS/THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
------pop pointer 0/1
@SP
M=M-1
A=M
D=M
@THIS/THAT
M=D

------push statick i
@file_name.i
D=M
@SP
A=M
M=D
@SP
M=M+1
------pop statick i
@SP
M=M-1
A=M
D=M
@file_name.i
M=D

------add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D+M
@SP
A=M
M=D
@SP
M=M+1

------sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@SP
M=D
@SP
M=M+1

------neg
@SP
A=M
A=A-1
M=-M

------eq
@SP
AM=M-1
D=M
@SP
AM=M-1
D=D-M
@EQ_TRUE
D;JEQ
@SP
A=M
M=0
@EQ_FALSE
0;JMP
(EQ_TRUE)
@SP
A=M
M=-1
(EQ_FALSE)
@SP
M=M+1

------gt
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@GT_TRUE
D;JGT
@SP
A=M
M=0
@GT_FALSE
0;JMP
(GT_TRUE)
@SP
A=M
M=-1
(GT_FALSE)
@SP
M=M+1

------lt
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@LT_TRUE
D;JLT
@SP
A=M
M=0
@LT_FALSE
0;JMP
(LT_TRUE)
@SP
A=M
M=-1
(LT_FALSE)
@SP
M=M+1

------and
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D&M
@SP
M=M+1

------or
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D|M
@SP
M=M+1

------not
@SP
A=M
A=A-1
M=!M

------label
(label)

------goto label
@label
0;JMP

------if-goto label
@SP
A=M
D=M
@SP
M=M-1
@label
D;JGT


------call functionName nArgs
@returnAddress
D=A
@SP    //push return address
A=M
M=D
@SP
M=M+1
@LCL  //push LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG  //push ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS //push THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT //push THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP  //ARG=SP-5-nArgs
D=M
@5
D=D-A
@nArgs
D=D-A
@ARG
M=D
@SP  //LCL=SP
D=M
@LCL
M=D
@functionName   //goto function
0;JMP
(returnAddress)  //return label


------function functionName nVars
(functionName)
@nVars
D=A
@end_i
D;JEQ
(loop_i)
@SP
A=M
M=0
@SP
M=M+1
D=D-1
@loop_i
D;JGT
(end_i)


------return
@LCL   //endframe=LCL
D=M
@endframe
M=D
@5		//retaddr=endframe-5
D=D-A
A=D
D=M
@retaddr
M=D
@SP    //*ARG=pop()
A=M-1
D=M
@ARG
A=M
M=D
@ARG   //SP=ARG+1
D=M+1
@SP
M=D
@endframe
M=M-1
A=M
D=M
@THAT
M=D
@endframe
M=M-1
A=M
D=M
@THIS
M=D
@endframe
M=M-1
A=M
D=M
@ARG
M=D
@endframe
M=M-1
A=M
D=M
@LCL
M=D
@retaddr
A=M
0;JMP


------BootStrap(SP=256, call Sys.init 0)
//set sp=256
@256
D=A
@SP
M=D
//call Sys.init 0
@bootstrap_00
D=A
@SP    //push return address
A=M
M=D
@SP
M=M+1
@LCL  //push LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG  //push ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS //push THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT //push THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP  //ARG=SP-5-nArgs
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP  //LCL=SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(bootstrap_00)
